{"componentChunkName":"component---src-templates-post-tsx","path":"/markdowns/typescript/typeDefinition/","result":{"data":{"site":{"siteMetadata":{"title":"Maeng's Blog","author":"Maeng","comment":{"utterances":"maeng2418/maeng2418.github.io"}}},"markdownRemark":{"id":"16920e04-ebf8-5d6b-85a1-d3f6dd7270b9","excerpt":"typeRoots 는 타입 정의 파일(.d.ts)들을 찾을 디렉터리를 지정하는 옵션입니다. 이 옵션은 TypeScript가 프로젝트의 전역 타입 정보를 인식할 때 사용됩니다. 는 와  디렉터리를 포함하고 있습니다. 이 설정은 TypeScript가 이 두 디렉터리에서 타입 정의 파일을 찾고, 해당 파일들을 전역 타입으로 사용할 수 있도록 합니다. typeRoots가 명시되지 않은 경우, TypeScript는 기본적으로 node_modules/@types…","html":"<h2 id=\"typeroots\" style=\"position:relative;\"><a href=\"#typeroots\" aria-label=\"typeroots permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeRoots</h2>\n<p><code class=\"language-text\">typeRoots</code>는 <strong>타입 정의 파일(.d.ts)들을 찾을 디렉터리를 지정</strong>하는 옵션입니다. 이 옵션은 TypeScript가 프로젝트의 전역 타입 정보를 인식할 때 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./node_modules/@types\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./@types\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">typeRoots</code>는 <code class=\"language-text\">node_modules/@types</code>와 <code class=\"language-text\">@types</code> 디렉터리를 포함하고 있습니다. 이 설정은 TypeScript가 이 두 디렉터리에서 타입 정의 파일을 찾고, 해당 파일들을 전역 타입으로 사용할 수 있도록 합니다.</p>\n<p><strong>typeRoots</strong>가 명시되지 않은 경우, TypeScript는 기본적으로 node_modules/@types 디렉터리를 검색하여 전역 타입을 자동으로 가져옵니다.</p>\n<h2 id=\"include\" style=\"position:relative;\"><a href=\"#include\" aria-label=\"include permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>include</h2>\n<p><code class=\"language-text\">include</code>는 TypeScript 컴파일러가 <strong>컴파일할 파일들을 지정</strong>하는 옵션입니다. 이 옵션에 명시된 파일들은 TypeScript 컴파일러가 컴파일하고 타입 체크를 수행할 파일들입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">include</code>는 <code class=\"language-text\">src</code> 디렉터리 하위의 모든 파일(<code class=\"language-text\">**/*</code>)을 포함합니다. 따라서 <code class=\"language-text\">src</code> 디렉터리 내의 모든 <code class=\"language-text\">.ts</code> 파일들이 컴파일됩니다.</p>\n<p><strong>include</strong>가 명시되지 않은 경우, TypeScript는 기본적으로 프로젝트 루트에서 tsconfig.json 파일을 기준으로 모든 .ts 파일을 컴파일 대상으로 삼습니다.</p>\n<h2 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h2>\n<ul>\n<li><strong><code class=\"language-text\">include</code></strong>: 컴파일할 소스 파일들을 지정합니다.</li>\n<li><strong><code class=\"language-text\">typeRoots</code></strong>: 타입 정의 파일들을 찾을 디렉터리를 지정합니다.</li>\n</ul>\n<h2 id=\"code-classlanguage-textincludecode-사용-시-code-classlanguage-texttyperootscode-인식-문제\" style=\"position:relative;\"><a href=\"#code-classlanguage-textincludecode-%EC%82%AC%EC%9A%A9-%EC%8B%9C-code-classlanguage-texttyperootscode-%EC%9D%B8%EC%8B%9D-%EB%AC%B8%EC%A0%9C\" aria-label=\"code classlanguage textincludecode 사용 시 code classlanguage texttyperootscode 인식 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">include</code> 사용 시 <code class=\"language-text\">typeRoots</code> 인식 문제</h2>\n<p>기본적으로 <code class=\"language-text\">include</code> 옵션과 <code class=\"language-text\">typeRoots</code> 옵션은 독립적으로 작동합니다. <code class=\"language-text\">include</code>는 컴파일할 소스 파일을 결정하고, <code class=\"language-text\">typeRoots</code>는 타입 정의 파일(.d.ts)을 찾는 디렉터리를 결정합니다. <code class=\"language-text\">include</code>에 의해 컴파일 될 파일이 <code class=\"language-text\">typeRoots</code> 내의 타입 정의 파일을 찾지 못하는 문제가 발생할 수 있습니다.</p>\n<h3 id=\"타입-정의-파일이-포함되지-않은-경우\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EC%A0%95%EC%9D%98-%ED%8C%8C%EC%9D%BC%EC%9D%B4-%ED%8F%AC%ED%95%A8%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EA%B2%BD%EC%9A%B0\" aria-label=\"타입 정의 파일이 포함되지 않은 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 정의 파일이 포함되지 않은 경우</h3>\n<p>만약 타입 정의 파일이 <code class=\"language-text\">include</code>에 의해 커버되지 않는 위치에 있다면 문제가 발생할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./node_modules/@types\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./@types\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 설정에서 <code class=\"language-text\">typeRoots</code>에 <code class=\"language-text\">./@types</code>이 포함되어 있지만, 만약 <code class=\"language-text\">@types</code> 폴더가 <code class=\"language-text\">src</code> 폴더 내에 있지 않고 루트 디렉터리에 있다면 <code class=\"language-text\">include</code> 옵션으로는 해당 폴더가 포함되지 않으므로, 전역 타입 정의가 인식되지 않습니다.</p>\n<h2 id=\"해결-방법-1\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95-1\" aria-label=\"해결 방법 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 방법 1</h2>\n<p><code class=\"language-text\">tsconfig.json</code>의 <code class=\"language-text\">types</code> 옵션을 사용하여 타입 정의를 특정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./node_modules/@types\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./@types\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utils\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 전역으로 인식할 타입 패키지 명시</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 되면 <code class=\"language-text\">include</code>에 <code class=\"language-text\">@types</code>를 포함시키지 않아도 <code class=\"language-text\">node_modules/@types/node.d.ts</code> 와, <code class=\"language-text\">@types/utils.d.ts</code> 정의 파일을 읽을 수 있음.</p>\n<blockquote>\n<p>단, <code class=\"language-text\">types</code>를 지정하지 않았을 때 default 값이 모두 가져오는거라, <code class=\"language-text\">node_modules</code> 에 있는 <code class=\"language-text\">@types</code> 내 모든 타입 정의 파일을 가져오지 못함.</p>\n</blockquote>\n<h2 id=\"해결-방법-2\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95-2\" aria-label=\"해결 방법 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 방법 2</h2>\n<p><strong><code class=\"language-text\">include</code>에서 타입 정의 파일이 있는 경로를 명시적으로 포함</strong>:\n<code class=\"language-text\">include</code> 설정에 타입 정의 파일들이 있는 경로를 명시적으로 포함시켜 타입 정의 파일들이 컴파일러에 의해 인식되도록 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./node_modules/@types\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./@types\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@types/**/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 설정을 사용하면 <code class=\"language-text\">src</code> 하위 파일뿐만 아니라 <code class=\"language-text\">@types</code> 하위 파일도 TypeScript 컴파일러가 인식하게 됩니다. 이 방법으로 <code class=\"language-text\">@types</code>에 있는 모든 타입 정의 파일들을 <code class=\"language-text\">include</code> 경로에 명시적으로 포함시켜 문제가 해결됩니다.</p>\n<p><strong>이럴 경우, typeRoots 생략 가능!</strong>\n<code class=\"language-text\">include</code> 옵션을 사용하면 TypeScript는 해당 경로에 있는 모든 파일을 타입 검사 및 컴파일 대상으로 포함하므로, <code class=\"language-text\">typeRoots</code>를 명시적으로 설정하지 않아도 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 'typeRoots'와 'types' 옵션을 생략</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@types/**/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><code class=\"language-text\">include</code></strong> 옵션을 통해 <code class=\"language-text\">src</code>, <code class=\"language-text\">@types</code> 디렉터리 내의 모든 파일을 컴파일러가 포함할 파일로 지정하고, <code class=\"language-text\">typeRoots</code> 옵션과 <code class=\"language-text\">types</code> 을 생략하여 기본적으로 <code class=\"language-text\">node_modules/@types</code> 내의 모든 타입이 자동으로 포함됩니다.</p>","frontmatter":{"title":"typeRoots vs include","category":"Typescript","date":"September 04, 2024"}}},"pageContext":{"slug":"/markdowns/typescript/typeDefinition/","previous":{"fields":{"slug":"/markdowns/react/react_testing_library/"},"frontmatter":{"title":"React Test 코드 작성"}},"next":null}},"staticQueryHashes":["1394309666","3128451518","322374106","3738667449","3990106271"],"slicesMap":{}}